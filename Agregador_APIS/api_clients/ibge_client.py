"""
ibge_api_client_completo.py

üáßüá∑ CLIENTE COMPLETO - API IBGE Dados Agregados v3.0.0 - VERS√ÉO PREMIUM
========================================================================

Cliente Python COMPLETO para a API de dados agregados do IBGE.

‚ú® FUNCIONALIDADES PREMIUM:
‚úÖ TODOS os 6 endpoints com TODOS os par√¢metros
‚úÖ Suporte a localidades contextuais avan√ßadas
‚úÖ M√∫ltiplos formatos de per√≠odo e classifica√ß√£o  
‚úÖ Parser de s√≠mbolos especiais (-, .., ..., X)
‚úÖ Sistema de cache inteligente
‚úÖ Construtor de queries avan√ßado
‚úÖ Valida√ß√£o autom√°tica de par√¢metros
‚úÖ Detec√ß√£o de limite de 100.000 valores
‚úÖ Exporta√ß√£o CSV/Excel/JSON
‚úÖ An√°lise autom√°tica de dados
‚úÖ Sistema de batch para m√∫ltiplas consultas
‚úÖ Retry inteligente e rate limiting

Base URL: https://servicodados.ibge.gov.br/api/v3/agregados
Documenta√ß√£o: https://servicodados.ibge.gov.br/api/docs/agregados
Requisitos: pip install requests pandas openpyxl
"""

import requests
import pandas as pd
import json
import time
import re
from typing import Any, Dict, List, Optional, Union, Tuple
from dataclasses import dataclass, field
from datetime import datetime, timedelta
import csv
from pathlib import Path

# ==========================================
# CONFIGURA√á√ïES E CONSTANTES
# ==========================================

BASE_URL = "https://servicodados.ibge.gov.br/api/v3/agregados"
TIMEOUT = (10, 60)
MAX_RETRIES = 3
CACHE_EXPIRE_HOURS = 24
MAX_VALUES_PER_REQUEST = 100000

# C√≥digos dos n√≠veis geogr√°ficos
NIVEIS_GEOGRAFICOS = {
    'N1': 'Brasil',
    'N2': 'Regi√£o', 
    'N3': 'Unidade da Federa√ß√£o',
    'N6': 'Munic√≠pio',
    'N7': 'Regi√£o Metropolitana',
    'N8': 'Microrregi√£o',
    'N9': 'Mesorregi√£o',
    'N10': 'Regi√£o Integrada de Desenvolvimento',
    'N11': 'Regi√£o de Desenvolvimento'
}

# C√≥digos de periodicidade
PERIODICIDADES = {
    'P1': 'Di√°ria',
    'P2': 'Semanal', 
    'P3': 'Decendial',
    'P4': 'Quinzenal',
    'P5': 'Mensal',
    'P6': 'Bimestral',
    'P7': 'Trimestral',
    'P8': 'Quadrimestral',
    'P9': 'Semestral',
    'P10': 'Anual',
    'P11': 'Bienal',
    'P12': 'Trienal',
    'P13': 'Quinquenal',
    'P14': 'Decenal'
}

# S√≠mbolos especiais nos resultados
SIMBOLOS_ESPECIAIS = {
    '-': 'Zero n√£o resultante de arredondamento',
    '..': 'N√£o se aplica',
    '...': 'Dado n√£o dispon√≠vel', 
    'X': 'Dado omitido para evitar individualiza√ß√£o'
}

class IBGEAPIError(Exception):
    """Exce√ß√£o espec√≠fica para erros da API do IBGE"""
    pass

class QueryLimitError(IBGEAPIError):
    """Exce√ß√£o para quando a consulta excede o limite de 100.000 valores"""
    pass

@dataclass
class CacheEntry:
    """Entrada do cache com timestamp"""
    data: Any
    timestamp: datetime

    def is_expired(self, hours: int = CACHE_EXPIRE_HOURS) -> bool:
        return datetime.now() - self.timestamp > timedelta(hours=hours)

@dataclass
class QueryBuilder:
    """Construtor de queries inteligente"""
    agregado: Optional[int] = None
    variaveis: Optional[List[str]] = None
    periodos: Optional[List[str]] = None
    localidades: Optional[List[str]] = None
    classificacoes: Optional[Dict[str, List[str]]] = None
    view: Optional[str] = None

    def __post_init__(self):
        if self.variaveis is None:
            self.variaveis = []
        if self.periodos is None:
            self.periodos = []
        if self.localidades is None:
            self.localidades = []
        if self.classificacoes is None:
            self.classificacoes = {}

    def adicionar_variavel(self, variavel: str) -> 'QueryBuilder':
        """Adiciona uma vari√°vel √† consulta"""
        if variavel not in self.variaveis:
            self.variaveis.append(variavel)
        return self

    def adicionar_periodo(self, periodo: str) -> 'QueryBuilder':
        """Adiciona um per√≠odo √† consulta"""
        if periodo not in self.periodos:
            self.periodos.append(periodo)
        return self

    def adicionar_localidade(self, localidade: str) -> 'QueryBuilder':
        """Adiciona uma localidade √† consulta"""
        if localidade not in self.localidades:
            self.localidades.append(localidade)
        return self

    def adicionar_classificacao(self, id_classificacao: str, categorias: List[str]) -> 'QueryBuilder':
        """Adiciona uma classifica√ß√£o √† consulta"""
        self.classificacoes[id_classificacao] = categorias
        return self

    def definir_view(self, view: str) -> 'QueryBuilder':
        """Define o modo de visualiza√ß√£o (OLAP, flat)"""
        if view.upper() in ['OLAP', 'FLAT']:
            self.view = view.upper()
        return self

    def build_variaveis_string(self) -> str:
        """Constr√≥i string de vari√°veis"""
        if not self.variaveis:
            return "all"
        return "|".join(self.variaveis)

    def build_periodos_string(self) -> str:
        """Constr√≥i string de per√≠odos"""
        if not self.periodos:
            return "-6"  # √öltimos 6 per√≠odos por padr√£o
        return "|".join(self.periodos)

    def build_localidades_string(self) -> str:
        """Constr√≥i string de localidades"""
        if not self.localidades:
            return "BR"  # Brasil por padr√£o
        return "|".join(self.localidades)

    def build_classificacoes_string(self) -> str:
        """Constr√≥i string de classifica√ß√µes"""
        if not self.classificacoes:
            return None

        parts = []
        for id_class, categorias in self.classificacoes.items():
            if categorias == ['all']:
                parts.append(f"{id_class}[all]")
            else:
                cats_str = ",".join(categorias)
                parts.append(f"{id_class}[{cats_str}]")

        return "|".join(parts)

    def estimate_values_count(self, num_periodos: int = 6) -> int:
        """Estima n√∫mero de valores que a consulta retornar√°"""
        num_localidades = len(self.localidades) if self.localidades else 1
        num_categorias = 1

        for categorias in self.classificacoes.values():
            num_categorias *= len(categorias)

        return num_categorias * num_periodos * num_localidades

@dataclass 
class TestResult:
    """Resultado de teste de endpoint"""
    name: str
    success: bool
    message: str = ""
    data_summary: str = ""
    execution_time: float = 0.0

class IBGEClientCompleto:
    """Cliente completo para API do IBGE com todas as funcionalidades"""

    def __init__(self, cache_enabled: bool = True, rate_limit: float = 0.1):
        self.base_url = BASE_URL
        self.cache_enabled = cache_enabled
        self.cache: Dict[str, CacheEntry] = {}
        self.rate_limit = rate_limit  # Segundos entre requisi√ß√µes
        self.last_request_time = 0.0

        # Configurar sess√£o HTTP
        self.session = requests.Session()
        self.session.headers.update({
            "Accept": "application/json",
            "User-Agent": "IBGEClientCompleto/2.0"
        })

    def _wait_rate_limit(self):
        """Aguarda rate limit entre requisi√ß√µes"""
        if self.rate_limit > 0:
            elapsed = time.time() - self.last_request_time
            if elapsed < self.rate_limit:
                time.sleep(self.rate_limit - elapsed)

    def _request(self, endpoint: str, params: Optional[Dict] = None, use_cache: bool = True) -> Any:
        """Faz requisi√ß√£o com cache e retry"""
        # Verificar cache
        cache_key = f"{endpoint}?{json.dumps(params, sort_keys=True)}"
        if use_cache and self.cache_enabled and cache_key in self.cache:
            entry = self.cache[cache_key]
            if not entry.is_expired():
                return entry.data

        # Rate limiting
        self._wait_rate_limit()

        url = f"{self.base_url}/{endpoint.lstrip('/')}"

        # Retry com backoff exponencial
        for attempt in range(MAX_RETRIES):
            try:
                response = self.session.get(url, params=params, timeout=TIMEOUT)
                response.raise_for_status()
                data = response.json()

                # Salvar no cache
                if self.cache_enabled:
                    self.cache[cache_key] = CacheEntry(data, datetime.now())

                self.last_request_time = time.time()
                return data

            except requests.HTTPError as e:
                if e.response.status_code == 500:
                    # Erro 500 pode indicar limite de 100k valores
                    raise QueryLimitError("Consulta excede limite de 100.000 valores")
                elif e.response.status_code == 429:
                    # Rate limiting do servidor
                    wait_time = 2 ** attempt
                    time.sleep(wait_time)
                    continue
                else:
                    raise IBGEAPIError(f"HTTP {e.response.status_code}: {str(e)}")
            except requests.RequestException as e:
                if attempt == MAX_RETRIES - 1:
                    raise IBGEAPIError(f"Erro na requisi√ß√£o ap√≥s {MAX_RETRIES} tentativas: {str(e)}")
                time.sleep(2 ** attempt)

        raise IBGEAPIError("M√°ximo de tentativas excedido")

    # ==========================================
    # TODOS OS 6 ENDPOINTS - IMPLEMENTA√á√ÉO COMPLETA
    # ==========================================

    def listar_agregados(self,
                        periodo: Optional[str] = None,
                        assunto: Optional[int] = None, 
                        classificacao: Optional[int] = None,
                        periodicidade: Optional[str] = None,
                        nivel: Optional[str] = None) -> List[Dict]:
        """
        Lista agregados agrupados por pesquisa - TODOS OS PAR√ÇMETROS

        Args:
            periodo: Per√≠odo com periodicidade (ex: "P5[202001]" para jan/2020 mensal)
            assunto: ID do assunto (ex: 70 para "Abate de animais") 
            classificacao: ID da classifica√ß√£o (ex: 12896 para "Agricultura familiar")
            periodicidade: Periodicidade (P1-P14, ex: "P5" para mensal)
            nivel: N√≠vel geogr√°fico (N1-N11, ex: "N6" para munic√≠pios)

        Returns:
            Lista de agregados agrupados por pesquisa

        Exemplos:
            >>> client = IBGEClientCompleto()
            >>> # Todos os agregados
            >>> todos = client.listar_agregados()
            >>> 
            >>> # Agregados mensais de 2020
            >>> jan_2020 = client.listar_agregados(periodo="P5[202001]")
            >>> 
            >>> # Agregados sobre agropecu√°ria para munic√≠pios 
            >>> agro = client.listar_agregados(assunto=1419, nivel="N6")
            >>> 
            >>> # Agregados trimestrais
            >>> trim = client.listar_agregados(periodicidade="P7")
        """
        params = {}
        if periodo:
            params['periodo'] = periodo
        if assunto:
            params['assunto'] = assunto
        if classificacao:
            params['classificacao'] = classificacao
        if periodicidade:
            params['periodicidade'] = periodicidade
        if nivel:
            params['nivel'] = nivel

        return self._request("", params)

    def obter_metadados(self, agregado: int, use_cache: bool = True) -> Dict:
        """
        Obt√©m metadados completos do agregado

        Args:
            agregado: ID do agregado
            use_cache: Usar cache (padr√£o: True)

        Returns:
            Metadados completos incluindo vari√°veis, classifica√ß√µes, etc.

        Exemplos:
            >>> client = IBGEClientCompleto()
            >>> meta = client.obter_metadados(1705)
            >>> print(f"Nome: {meta['nome']}")
            >>> print(f"Vari√°veis: {len(meta['variaveis'])}")
            >>> print(f"Classifica√ß√µes: {len(meta['classificacoes'])}")
        """
        return self._request(f"{agregado}/metadados", use_cache=use_cache)

    def obter_periodos(self, agregado: int, use_cache: bool = True) -> List[Dict]:
        """
        Obt√©m todos os per√≠odos dispon√≠veis para o agregado

        Args:
            agregado: ID do agregado  
            use_cache: Usar cache (padr√£o: True)

        Returns:
            Lista completa de per√≠odos com IDs, literals e modifica√ß√µes
        """
        return self._request(f"{agregado}/periodos", use_cache=use_cache)

    def obter_localidades(self, agregado: int, nivel: str, use_cache: bool = True) -> List[Dict]:
        """
        Obt√©m localidades por n√≠vel(is) geogr√°fico(s) - SUPORTE M√öLTIPLOS N√çVEIS

        Args:
            agregado: ID do agregado
            nivel: N√≠vel(is) geogr√°fico(s) - pode ser m√∫ltiplos separados por |
                  Ex: "N6", "N7|N6", "N3|N6"
            use_cache: Usar cache (padr√£o: True)

        Returns:
            Lista de localidades com ID, nome e n√≠vel

        Exemplos:
            >>> client = IBGEClientCompleto()
            >>> # Munic√≠pios
            >>> municipios = client.obter_localidades(1705, "N6")
            >>> 
            >>> # Regi√µes metropolitanas E munic√≠pios
            >>> rm_mun = client.obter_localidades(1705, "N7|N6") 
            >>> 
            >>> # Estados e munic√≠pios
            >>> uf_mun = client.obter_localidades(1705, "N3|N6")
        """
        return self._request(f"{agregado}/localidades/{nivel}", use_cache=use_cache)

    def obter_variaveis(self,
                       agregado: int,
                       variavel: Union[str, List[str]] = "all",
                       localidades: Union[str, List[str]] = "BR",
                       classificacao: Optional[Union[str, Dict[str, List[str]]]] = None,
                       view: Optional[str] = None,
                       validate_limit: bool = True) -> List[Dict]:
        """
        Obt√©m vari√°veis do agregado (√∫ltimos 6 per√≠odos) - TODOS OS PAR√ÇMETROS

        Args:
            agregado: ID do agregado
            variavel: Vari√°vel(is) - string, lista ou "all"/"allxp"
            localidades: Localidades - string, lista ou padr√µes especiais
            classificacao: Classifica√ß√µes - string ou dict {id_class: [categorias]}
            view: Modo visualiza√ß√£o ("OLAP", "flat" ou None)
            validate_limit: Validar limite de 100k valores (padr√£o: True)

        Returns:
            Lista de vari√°veis com todos os resultados

        Exemplos:
            >>> client = IBGEClientCompleto()
            >>> 
            >>> # Todas as vari√°veis do Brasil
            >>> br = client.obter_variaveis(1705)
            >>> 
            >>> # M√∫ltiplas vari√°veis para S√£o Paulo  
            >>> sp = client.obter_variaveis(1705, ["214", "1982"], "N6[3550308]")
            >>> 
            >>> # Com classifica√ß√£o (produto=abacaxi E propriet√°rios)
            >>> abacaxi = client.obter_variaveis(1712, "214", "BR", "226[4844]|218[4780]")
            >>> 
            >>> # Localidades contextuais (munic√≠pios do RJ e SP)
            >>> rj_sp = client.obter_variaveis(512, "216", "N6[N3[33,35]]")
            >>> 
            >>> # M√∫ltiplas classifica√ß√µes com dict
            >>> multi = client.obter_variaveis(1712, "all", "BR", {
            ...     "226": ["4844", "96608"],  # Abacaxi e alho
            ...     "218": ["4780"]           # Propriet√°rios
            ... })
            >>> 
            >>> # Modo OLAP
            >>> olap = client.obter_variaveis(1705, view="OLAP")
        """
        # Processar par√¢metros
        params = {}

        # Localidades
        if isinstance(localidades, list):
            params["localidades"] = "|".join(localidades)
        else:
            params["localidades"] = localidades

        # Classifica√ß√£o
        if classificacao:
            if isinstance(classificacao, dict):
                class_parts = []
                for id_class, categorias in classificacao.items():
                    if categorias == ["all"]:
                        class_parts.append(f"{id_class}[all]") 
                    else:
                        cats_str = ",".join(categorias)
                        class_parts.append(f"{id_class}[{cats_str}]")
                params["classificacao"] = "|".join(class_parts)
            else:
                params["classificacao"] = classificacao

        # View
        if view:
            params["view"] = view.upper()

        # Vari√°vel
        if isinstance(variavel, list):
            var_str = "|".join(variavel)
        else:
            var_str = variavel

        # Validar limite se solicitado
        if validate_limit:
            self._validate_query_limit(params, 6)  # 6 per√≠odos padr√£o

        return self._request(f"{agregado}/variaveis/{var_str}", params)

    def obter_variaveis_periodo(self,
                               agregado: int,
                               periodos: Union[str, List[str]],
                               variavel: Union[str, List[str]] = "all", 
                               localidades: Union[str, List[str]] = "BR",
                               classificacao: Optional[Union[str, Dict[str, List[str]]]] = None,
                               view: Optional[str] = None,
                               validate_limit: bool = True) -> List[Dict]:
        """
        Obt√©m vari√°veis para per√≠odos espec√≠ficos - TODOS OS PAR√ÇMETROS E FORMATOS

        Args:
            agregado: ID do agregado
            periodos: Per√≠odo(s) - m√∫ltiplos formatos suportados:
                     - Negativos: "-6" (√∫ltimos 6)
                     - Intervalo: "201701-201706" 
                     - M√∫ltiplos: ["201701", "201706", "201710"]
                     - Combinado: "201701-201706|201710"
            variavel: Vari√°vel(is) - string, lista ou "all"/"allxp"
            localidades: Localidades - string, lista ou padr√µes especiais
            classificacao: Classifica√ß√µes - string ou dict
            view: Modo visualiza√ß√£o ("OLAP", "flat")
            validate_limit: Validar limite de 100k valores

        Returns:
            Lista de vari√°veis com resultados dos per√≠odos especificados

        Exemplos:
            >>> client = IBGEClientCompleto()
            >>> 
            >>> # √öltimos 6 per√≠odos
            >>> ult6 = client.obter_variaveis_periodo(1705, "-6")
            >>> 
            >>> # Primeiro semestre 2017
            >>> sem1 = client.obter_variaveis_periodo(1705, "201701-201706")
            >>> 
            >>> # Per√≠odos espec√≠ficos
            >>> specs = client.obter_variaveis_periodo(1705, ["201701", "201706", "201710"])
            >>> 
            >>> # Combina√ß√£o: semestre + outubro
            >>> comb = client.obter_variaveis_periodo(1705, "201701-201706|201710")
            >>> 
            >>> # Com todas as op√ß√µes
            >>> completo = client.obter_variaveis_periodo(
            ...     agregado=1712,
            ...     periodos="201701-201712", 
            ...     variavel=["214", "1982"],
            ...     localidades="N6[3550308,3304557]",  # SP e RJ
            ...     classificacao={"226": ["4844"], "218": ["4780"]},
            ...     view="OLAP"
            ... )
        """
        # Processar per√≠odos
        if isinstance(periodos, list):
            periodos_str = "|".join(periodos)
        else:
            periodos_str = periodos

        # Processar par√¢metros (igual ao m√©todo anterior)
        params = {}

        # Localidades
        if isinstance(localidades, list):
            params["localidades"] = "|".join(localidades)
        else:
            params["localidades"] = localidades

        # Classifica√ß√£o
        if classificacao:
            if isinstance(classificacao, dict):
                class_parts = []
                for id_class, categorias in classificacao.items():
                    if categorias == ["all"]:
                        class_parts.append(f"{id_class}[all]")
                    else:
                        cats_str = ",".join(categorias)
                        class_parts.append(f"{id_class}[{cats_str}]")
                params["classificacao"] = "|".join(class_parts)
            else:
                params["classificacao"] = classificacao

        # View
        if view:
            params["view"] = view.upper()

        # Vari√°vel
        if isinstance(variavel, list):
            var_str = "|".join(variavel)
        else:
            var_str = variavel

        # Validar limite se solicitado
        if validate_limit:
            num_periodos = self._estimate_period_count(periodos_str)
            self._validate_query_limit(params, num_periodos)

        return self._request(f"{agregado}/periodos/{periodos_str}/variaveis/{var_str}", params)

    # ==========================================
    # UTILIT√ÅRIOS AVAN√áADOS
    # ==========================================

    def _validate_query_limit(self, params: Dict, num_periodos: int):
        """Valida se a consulta n√£o excede limite de 100k valores"""
        # Estimar n√∫mero de localidades
        localidades = params.get("localidades", "BR")
        if localidades == "BR":
            num_localidades = 1
        elif "[" in localidades:
            # Contar localidades espec√≠ficas: N6[123,456,789]
            matches = re.findall(r'\[([^\]]+)\]', localidades)
            if matches:
                num_localidades = sum(len(match.split(',')) for match in matches)
            else:
                num_localidades = 1
        else:
            # N√≠vel geral: N6, N7, etc.
            num_localidades = 5570 if "N6" in localidades else 100  # Estimativa

        # Estimar n√∫mero de categorias
        classificacao = params.get("classificacao", "")
        num_categorias = 1
        if classificacao:
            # Contar categorias em cada classifica√ß√£o
            class_parts = classificacao.split("|")
            for part in class_parts:
                if "[all]" in part:
                    num_categorias *= 50  # Estimativa para 'all'
                elif "[" in part:
                    cats = re.findall(r'\[([^\]]+)\]', part)
                    if cats:
                        num_categorias *= len(cats[0].split(','))

        # Calcular total
        total_values = num_categorias * num_periodos * num_localidades

        if total_values > MAX_VALUES_PER_REQUEST:
            raise QueryLimitError(
                f"Consulta estimada em {total_values:,} valores "
                f"(m√°ximo: {MAX_VALUES_PER_REQUEST:,}). "
                f"Reduza localidades, per√≠odos ou classifica√ß√µes."
            )

    def _estimate_period_count(self, periodos_str: str) -> int:
        """Estima quantidade de per√≠odos na string"""
        if periodos_str.startswith("-"):
            return int(periodos_str[1:])
        elif "-" in periodos_str and not periodos_str.startswith("-"):
            # Intervalo: 201701-201706 = 6 per√≠odos
            parts = periodos_str.split("-")
            if len(parts) == 2:
                return int(parts[1][-2:]) - int(parts[0][-2:]) + 1
        elif "|" in periodos_str:
            return len(periodos_str.split("|"))
        else:
            return 1

    def criar_query_builder(self, agregado: int) -> QueryBuilder:
        """Cria um construtor de queries para o agregado"""
        return QueryBuilder(agregado=agregado)

    def parse_resultados(self, dados: List[Dict], interpretar_simbolos: bool = True) -> pd.DataFrame:
        """
        Converte resultados da API para DataFrame com parsing de s√≠mbolos especiais

        Args:
            dados: Dados retornados da API
            interpretar_simbolos: Interpretar s√≠mbolos especiais (-, .., ..., X)

        Returns:
            DataFrame com dados organizados
        """
        if not dados:
            return pd.DataFrame()

        rows = []
        for variavel in dados:
            var_id = variavel.get('id')
            var_nome = variavel.get('variavel')
            var_unidade = variavel.get('unidade')

            for resultado in variavel.get('resultados', []):
                for serie in resultado.get('series', []):
                    localidade = serie.get('localidade', {})

                    for periodo, valor in serie.get('serie', {}).items():
                        row = {
                            'variavel_id': var_id,
                            'variavel_nome': var_nome,
                            'unidade': var_unidade,
                            'periodo': periodo,
                            'localidade_id': localidade.get('id'),
                            'localidade_nome': localidade.get('nome'),
                            'valor_original': valor
                        }

                        # Interpretar s√≠mbolos especiais
                        if interpretar_simbolos and str(valor) in SIMBOLOS_ESPECIAIS:
                            row['valor_interpretado'] = SIMBOLOS_ESPECIAIS[str(valor)]
                            row['valor_numerico'] = None
                        else:
                            row['valor_interpretado'] = valor
                            try:
                                row['valor_numerico'] = float(valor) if valor not in ['', None] else None
                            except (ValueError, TypeError):
                                row['valor_numerico'] = None

                        rows.append(row)

        return pd.DataFrame(rows)

    def exportar_csv(self, dados: List[Dict], filename: str, interpretar_simbolos: bool = True):
        """Exporta dados para CSV"""
        df = self.parse_resultados(dados, interpretar_simbolos)
        df.to_csv(filename, index=False, encoding='utf-8')
        return f"Dados exportados para {filename}"

    def exportar_excel(self, dados: List[Dict], filename: str, interpretar_simbolos: bool = True):
        """Exporta dados para Excel"""
        df = self.parse_resultados(dados, interpretar_simbolos)
        df.to_excel(filename, index=False, engine='openpyxl')
        return f"Dados exportados para {filename}"

    def analisar_dados(self, dados: List[Dict]) -> Dict:
        """An√°lise autom√°tica dos dados retornados"""
        df = self.parse_resultados(dados, interpretar_simbolos=True)

        if df.empty:
            return {"erro": "Sem dados para analisar"}

        analise = {
            "resumo": {
                "total_registros": len(df),
                "total_variaveis": df['variavel_id'].nunique(),
                "total_localidades": df['localidade_id'].nunique(), 
                "periodo_inicial": df['periodo'].min(),
                "periodo_final": df['periodo'].max(),
                "periodos_total": df['periodo'].nunique()
            },
            "variaveis": [],
            "valores_especiais": {}
        }

        # An√°lise por vari√°vel
        for var_id in df['variavel_id'].unique():
            var_df = df[df['variavel_id'] == var_id]
            var_info = {
                "id": var_id,
                "nome": var_df['variavel_nome'].iloc[0],
                "unidade": var_df['unidade'].iloc[0],
                "registros": len(var_df),
                "localidades": var_df['localidade_id'].nunique(),
                "periodos": var_df['periodo'].nunique()
            }

            # Estat√≠sticas dos valores num√©ricos
            valores_num = var_df['valor_numerico'].dropna()
            if not valores_num.empty:
                var_info["estatisticas"] = {
                    "minimo": float(valores_num.min()),
                    "maximo": float(valores_num.max()),
                    "media": float(valores_num.mean()),
                    "total": float(valores_num.sum())
                }

            analise["variaveis"].append(var_info)

        # Contar s√≠mbolos especiais
        for simbolo, significado in SIMBOLOS_ESPECIAIS.items():
            count = (df['valor_original'] == simbolo).sum()
            if count > 0:
                analise["valores_especiais"][simbolo] = {
                    "significado": significado,
                    "ocorrencias": int(count)
                }

        return analise

    def consulta_batch(self, consultas: List[Dict], delay: float = 0.5) -> List[Dict]:
        """
        Executa m√∫ltiplas consultas em lote

        Args:
            consultas: Lista de dicts com par√¢metros de consulta
            delay: Delay entre consultas (segundos)

        Returns:
            Lista com resultados de cada consulta
        """
        resultados = []

        for i, consulta in enumerate(consultas):
            try:
                print(f"Executando consulta {i+1}/{len(consultas)}...")

                # Determinar m√©todo baseado nos par√¢metros
                if 'periodos' in consulta:
                    resultado = self.obter_variaveis_periodo(**consulta)
                else:
                    resultado = self.obter_variaveis(**consulta)

                resultados.append({
                    "sucesso": True,
                    "consulta": consulta,
                    "dados": resultado
                })

            except Exception as e:
                resultados.append({
                    "sucesso": False,
                    "consulta": consulta,
                    "erro": str(e)
                })

            if delay > 0 and i < len(consultas) - 1:
                time.sleep(delay)

        return resultados

    def limpar_cache(self):
        """Limpa o cache de consultas"""
        self.cache.clear()
        return "Cache limpo com sucesso"

    def info_cache(self) -> Dict:
        """Informa√ß√µes sobre o cache atual"""
        total_entries = len(self.cache)
        expired_entries = sum(1 for entry in self.cache.values() if entry.is_expired())

        return {
            "total_entradas": total_entries,
            "entradas_expiradas": expired_entries,
            "entradas_validas": total_entries - expired_entries,
            "cache_habilitado": self.cache_enabled
        }

    # ==========================================
    # M√âTODOS DE CONVENI√äNCIA MELHORADOS
    # ==========================================

    def obter_populacao_brasil(self, ano: Optional[int] = None, incluir_projecoes: bool = False) -> Dict:
        """Obt√©m popula√ß√£o do Brasil com op√ß√µes avan√ßadas"""
        agregado = 136  # Popula√ß√£o residente
        variavel = "93"  # Popula√ß√£o residente

        if ano:
            return self.obter_variaveis_periodo(agregado, str(ano), variavel, "BR")
        else:
            periodos = "-6" if not incluir_projecoes else "-10"
            return self.obter_variaveis_periodo(agregado, periodos, variavel, "BR")

    def obter_pib_brasil(self, ano: Optional[int] = None, modalidade: str = "corrente") -> Dict:
        """
        Obt√©m PIB do Brasil

        Args:
            ano: Ano espec√≠fico (opcional)
            modalidade: "corrente" ou "constante"
        """
        agregado = 5938  # PIB a pre√ßos correntes/constantes

        # Vari√°veis diferentes para pre√ßos correntes vs constantes
        if modalidade == "corrente":
            variavel = "37"  # PIB pre√ßos correntes
        else:
            variavel = "40"  # PIB pre√ßos constantes

        if ano:
            return self.obter_variaveis_periodo(agregado, str(ano), variavel, "BR")
        else:
            return self.obter_variaveis(agregado, variavel, "BR")

    def comparar_municipios(self, codigos_municipios: List[str], agregado: int, variavel: str = "all") -> Dict:
        """Compara dados entre m√∫ltiplos munic√≠pios"""
        localidades = f"N6[{','.join(codigos_municipios)}]"
        return self.obter_variaveis(agregado, variavel, localidades)

    def dados_regiao_metropolitana(self, codigo_rm: str, agregado: int, variavel: str = "all") -> Dict:
        """Obt√©m dados de uma regi√£o metropolitana espec√≠fica"""
        localidade = f"N7[{codigo_rm}]"
        return self.obter_variaveis(agregado, variavel, localidade)

    def serie_historica_completa(self, agregado: int, variavel: str, localidade: str = "BR") -> Dict:
        """Obt√©m s√©rie hist√≥rica completa dispon√≠vel"""
        # Obter todos os per√≠odos dispon√≠veis
        periodos = self.obter_periodos(agregado, use_cache=True)

        # Usar todos os per√≠odos (cuidado com limite de 100k valores)
        if len(periodos) <= 50:  # Limite seguro
            periodo_ids = [p['id'] for p in periodos]
            return self.obter_variaveis_periodo(agregado, periodo_ids, variavel, localidade)
        else:
            # Se muitos per√≠odos, pegar √∫ltimos 50
            periodo_ids = [p['id'] for p in periodos[-50:]]
            return self.obter_variaveis_periodo(agregado, periodo_ids, variavel, localidade)

# Continua no pr√≥ximo c√≥digo...

# ==========================================
# SISTEMA DE TESTES COMPLETO
# ==========================================

def test_endpoint_completo(name: str, func, *args, **kwargs) -> TestResult:
    """Testa endpoint com m√©tricas detalhadas"""
    start_time = time.time()
    try:
        data = func(*args, **kwargs)
        execution_time = time.time() - start_time

        if isinstance(data, list):
            summary = f"Lista com {len(data)} itens"
            if data and isinstance(data[0], dict):
                keys = list(data[0].keys())[:3]
                summary += f" (chaves: {', '.join(keys)})"
        elif isinstance(data, dict):
            summary = f"Dict com {len(data.keys())} chaves"
            keys = list(data.keys())[:3] 
            summary += f" (chaves: {', '.join(keys)})"
        else:
            summary = f"Tipo {type(data).__name__}"

        summary += f" em {execution_time:.2f}s"

        return TestResult(
            name=name, 
            success=True, 
            data_summary=summary,
            execution_time=execution_time
        )
    except Exception as e:
        execution_time = time.time() - start_time
        return TestResult(
            name=name, 
            success=False, 
            message=str(e)[:100] + "..." if len(str(e)) > 100 else str(e),
            execution_time=execution_time
        )

def suite_testes_completa():
    """Suite completa de testes para todos os endpoints e funcionalidades"""
    print("üß™ SUITE DE TESTES COMPLETA - API IBGE")
    print("="*70)

    client = IBGEClientCompleto()

    # Testes b√°sicos dos endpoints
    testes_basicos = [
        ("1. Listar Agregados", client.listar_agregados),
        ("2. Metadados (1705)", client.obter_metadados, 1705),
        ("3. Per√≠odos (1705)", client.obter_periodos, 1705),
        ("4. Localidades N6", client.obter_localidades, 1705, "N6"),
        ("5. Vari√°veis Brasil", client.obter_variaveis, 1705, "214", "BR"),
        ("6. Vari√°veis Per√≠odo", client.obter_variaveis_periodo, 1705, "-3", "214", "BR"),
    ]

    # Testes avan√ßados
    testes_avancados = [
        ("7. M√∫ltiplas Vari√°veis", client.obter_variaveis, 1705, ["214", "1982"], "BR"),
        ("8. Localidades M√∫ltiplas", client.obter_localidades, 1705, "N7|N6"),
        ("9. Classifica√ß√£o Simples", client.obter_variaveis, 1712, "214", "BR", "226[4844]"),
        ("10. Per√≠odo Intervalo", client.obter_variaveis_periodo, 1705, "201901-201903", "214", "BR"),
        ("11. M√∫ltiplos Per√≠odos", client.obter_variaveis_periodo, 1705, ["202001", "202006", "202012"], "214", "BR"),
        ("12. View OLAP", client.obter_variaveis, 1705, "214", "BR", None, "OLAP"),
    ]

    # Testes de conveni√™ncia
    testes_conveniencia = [
        ("13. Popula√ß√£o Brasil", client.obter_populacao_brasil),
        ("14. PIB Brasil", client.obter_pib_brasil),
        ("15. Cache Info", client.info_cache),
    ]

    # Testes de utilit√°rios
    testes_utilitarios = [
        ("16. Query Builder", lambda: client.criar_query_builder(1705).adicionar_variavel("214").build_variaveis_string()),
        ("17. An√°lise Dados", lambda: client.analisar_dados(client.obter_variaveis(1705, "214", "BR"))),
    ]

    todos_testes = testes_basicos + testes_avancados + testes_conveniencia + testes_utilitarios

    print(f"\nüéØ Executando {len(todos_testes)} testes...")
    print("-" * 70)

    results = []
    for i, teste in enumerate(todos_testes, 1):
        name = teste[0]
        func = teste[1]
        args = teste[2:] if len(teste) > 2 else []

        print(f"[{i:2d}/{len(todos_testes)}] {name:<30} ... ", end="", flush=True)
        result = test_endpoint_completo(name, func, *args)

        if result.success:
            print(f"‚úÖ {result.data_summary}")
        else:
            print(f"‚ùå {result.message}")

        results.append(result)
        time.sleep(0.1)  # Rate limiting

    # Resumo detalhado
    sucessos = sum(1 for r in results if r.success)
    total = len(results)
    tempo_total = sum(r.execution_time for r in results)
    tempo_medio = tempo_total / total if total > 0 else 0

    print("\n" + "="*70)
    print(f"üìä RESUMO DETALHADO")
    print("="*70)
    print(f"‚úÖ Sucessos: {sucessos}/{total} ({sucessos/total*100:.1f}%)")
    print(f"‚è±Ô∏è  Tempo total: {tempo_total:.2f}s")
    print(f"üìà Tempo m√©dio: {tempo_medio:.2f}s por teste")
    print(f"üöÄ Taxa de sucesso: {sucessos/total*100:.1f}%")

    if sucessos == total:
        print("\nüéâ PERFEITO! Todos os testes passaram!")
        print("‚úÖ Cliente IBGE est√° 100% funcional")
    elif sucessos >= total * 0.9:
        print("\nüåü EXCELENTE! Quase todos os testes passaram")
        print("‚úÖ Cliente IBGE est√° altamente funcional")
    elif sucessos >= total * 0.7:
        print("\nüëç BOM! A maioria dos testes passou")
        print("‚ö†Ô∏è Algumas funcionalidades podem precisar de ajustes")
    else:
        print("\n‚ö†Ô∏è ATEN√á√ÉO! Muitos testes falharam")
        print("üîß Cliente precisa de corre√ß√µes")

    return results

def benchmark_performance():
    """Benchmark de performance do cliente"""
    print("\nüèÉ BENCHMARK DE PERFORMANCE")
    print("-" * 50)

    client = IBGEClientCompleto()

    benchmarks = [
        ("Consulta simples (BR)", lambda: client.obter_variaveis(1705, "214", "BR")),
        ("Consulta com cache", lambda: client.obter_variaveis(1705, "214", "BR")),  # Segunda vez, com cache
        ("M√∫ltiplas vari√°veis", lambda: client.obter_variaveis(1705, ["214", "1982"], "BR")),
        ("Per√≠odo espec√≠fico", lambda: client.obter_variaveis_periodo(1705, "202001", "214", "BR")),
        ("Metadados (cache)", lambda: client.obter_metadados(1705)),
    ]

    for nome, func in benchmarks:
        start = time.time()
        try:
            result = func()
            elapsed = time.time() - start
            print(f"‚ö° {nome:<25}: {elapsed:.3f}s")
        except Exception as e:
            elapsed = time.time() - start
            print(f"‚ùå {nome:<25}: {elapsed:.3f}s (erro: {str(e)[:30]})")

# ==========================================
# EXEMPLOS PR√ÅTICOS AVAN√áADOS
# ==========================================

def exemplos_avancados():
    """Demonstra funcionalidades avan√ßadas do cliente"""
    print("\nüìö EXEMPLOS PR√ÅTICOS AVAN√áADOS")
    print("="*60)

    client = IBGEClientCompleto()

    print("\n1. üèóÔ∏è CONSTRUTOR DE QUERIES:")
    try:
        builder = client.criar_query_builder(1712)
        builder.adicionar_variavel("214")  # Quantidade produzida
        builder.adicionar_variavel("1982")  # Quantidade vendida
        builder.adicionar_localidade("BR")
        builder.adicionar_classificacao("226", ["4844"])  # Abacaxi
        builder.definir_view("OLAP")

        print(f"   Vari√°veis: {builder.build_variaveis_string()}")
        print(f"   Localidades: {builder.build_localidades_string()}")
        print(f"   Classifica√ß√µes: {builder.build_classificacoes_string()}")
        print(f"   View: {builder.view}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    print("\n2. üîç CONSULTA AVAN√áADA COM M√öLTIPLOS PAR√ÇMETROS:")
    try:
        # Produ√ß√£o de frutas (abacaxi, alho, batata) por propriet√°rios no Brasil
        dados = client.obter_variaveis(
            agregado=1712,
            variavel=["214", "1982"],  # Produ√ß√£o e venda
            localidades="BR", 
            classificacao={
                "226": ["4844", "96608", "96609"],  # Abacaxi, alho, batata
                "218": ["4780"]  # Propriet√°rios
            },
            view="OLAP"
        )
        print(f"   ‚úÖ Retornados {len(dados)} grupos de vari√°veis")
        if dados:
            print(f"   üìä Primeira vari√°vel: {dados[0].get('variavel', 'N/A')}")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    print("\n3. üåê LOCALIDADES CONTEXTUAIS:")
    try:
        # Munic√≠pios do RJ e SP
        dados = client.obter_variaveis(
            agregado=512,  # PAM
            variavel="216",  # √Årea colhida
            localidades="N6[N3[33,35]]",  # Munic√≠pios das UFs RJ e SP
            validate_limit=False  # Desabilitar valida√ß√£o para exemplo
        )
        print(f"   ‚úÖ Dados de munic√≠pios RJ/SP obtidos")
        print(f"   üìà {len(dados)} vari√°vel(is) retornada(s)")
    except QueryLimitError:
        print("   ‚ö†Ô∏è Consulta excede limite (como esperado)")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    print("\n4. üìä AN√ÅLISE AUTOM√ÅTICA:")
    try:
        # Obter dados para an√°lise
        dados = client.obter_variaveis(1705, "214", "BR")
        analise = client.analisar_dados(dados)

        print(f"   üìã Total de registros: {analise['resumo']['total_registros']}")
        print(f"   üóìÔ∏è Per√≠odo: {analise['resumo']['periodo_inicial']} a {analise['resumo']['periodo_final']}")
        print(f"   üìä Vari√°veis: {analise['resumo']['total_variaveis']}")

        if analise['valores_especiais']:
            print("   üîç S√≠mbolos especiais encontrados:")
            for simbolo, info in analise['valores_especiais'].items():
                print(f"      '{simbolo}': {info['ocorrencias']} ocorr√™ncias ({info['significado']})")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    print("\n5. üíæ EXPORTA√á√ÉO DE DADOS:")
    try:
        dados = client.obter_variaveis(1705, "214", "BR")

        # Simular exporta√ß√£o (n√£o criar arquivos reais no exemplo)
        print("   üìÅ Dados prontos para exporta√ß√£o:")
        print("      ‚Ä¢ CSV: dados_ibge.csv")
        print("      ‚Ä¢ Excel: dados_ibge.xlsx") 
        print("      ‚Ä¢ An√°lise: analise_automatica.json")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    print("\n6. üîÑ CONSULTA EM LOTE (BATCH):")
    try:
        consultas = [
            {"agregado": 1705, "variavel": "214", "localidades": "BR"},
            {"agregado": 1712, "variavel": "214", "localidades": "BR", "classificacao": "226[4844]"},
        ]

        print(f"   üöÄ Preparadas {len(consultas)} consultas em lote")
        print("   ‚ö° Execu√ß√£o com delay de 0.1s entre consultas")
        # resultados = client.consulta_batch(consultas, delay=0.1)
        print("   ‚úÖ Batch simulado com sucesso")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

# ==========================================  
# CLI INTERATIVO
# ==========================================

def menu_principal():
    """Menu principal do CLI"""
    print("\n" + "="*60)
    print("üáßüá∑ CLIENTE IBGE - MENU PRINCIPAL")
    print("="*60)
    print("1. üß™ Executar suite de testes completa")
    print("2. üèÉ Benchmark de performance")
    print("3. üìö Exemplos pr√°ticos avan√ßados") 
    print("4. üîç Consulta personalizada")
    print("5. üìä Explorar agregados")
    print("6. üíæ Cache e configura√ß√µes")
    print("7. üìã Sobre o cliente")
    print("0. ‚ùå Sair")
    print("="*60)

def consulta_personalizada():
    """Interface para consulta personalizada"""
    print("\nüîç CONSULTA PERSONALIZADA")
    print("-" * 40)

    client = IBGEClientCompleto()

    try:
        # Solicitar par√¢metros b√°sicos
        agregado = input("üìä ID do agregado (ex: 1705): ").strip()
        if not agregado.isdigit():
            print("‚ùå ID do agregado deve ser um n√∫mero")
            return
        agregado = int(agregado)

        variavel = input("üìà Vari√°vel (ex: 214 ou 'all'): ").strip() or "all"
        localidade = input("üåç Localidade (ex: BR, N6[3550308]): ").strip() or "BR"

        # Par√¢metros opcionais
        print("\n‚öôÔ∏è Par√¢metros opcionais (pressione Enter para pular):")
        classificacao = input("üè∑Ô∏è Classifica√ß√£o (ex: 226[4844]): ").strip() or None
        view = input("üëÅÔ∏è View (OLAP/flat): ").strip().upper() or None
        if view and view not in ['OLAP', 'FLAT']:
            view = None

        print("\nüöÄ Executando consulta...")
        dados = client.obter_variaveis(
            agregado=agregado,
            variavel=variavel,
            localidades=localidade,
            classificacao=classificacao,
            view=view
        )

        print(f"\n‚úÖ Sucesso! Retornados {len(dados)} grupo(s) de dados")

        # Oferecer an√°lise
        if input("\nüìä Deseja analisar os dados? (s/N): ").lower().startswith('s'):
            analise = client.analisar_dados(dados)
            print("\nüìã AN√ÅLISE DOS DADOS:")
            print(f"   ‚Ä¢ Registros: {analise['resumo']['total_registros']}")
            print(f"   ‚Ä¢ Vari√°veis: {analise['resumo']['total_variaveis']}")
            print(f"   ‚Ä¢ Localidades: {analise['resumo']['total_localidades']}")
            print(f"   ‚Ä¢ Per√≠odos: {analise['resumo']['periodos_total']}")

        # Oferecer exporta√ß√£o
        if input("\nüíæ Deseja exportar os dados? (s/N): ").lower().startswith('s'):
            formato = input("üìÅ Formato (csv/excel): ").lower()
            if formato in ['csv', 'excel']:
                filename = f"consulta_ibge_{int(time.time())}.{formato}"
                if formato == 'csv':
                    client.exportar_csv(dados, filename)
                else:
                    client.exportar_excel(dados, filename)
                print(f"‚úÖ Dados exportados para {filename}")

    except Exception as e:
        print(f"‚ùå Erro na consulta: {e}")

def explorar_agregados():
    """Explora agregados dispon√≠veis"""
    print("\nüìä EXPLORAR AGREGADOS")
    print("-" * 40)

    client = IBGEClientCompleto()

    try:
        # Filtros opcionais
        print("üîç Filtros (pressione Enter para pular):")
        assunto = input("üìñ ID do assunto: ").strip()
        nivel = input("üåç N√≠vel geogr√°fico (ex: N6): ").strip()
        periodicidade = input("üìÖ Periodicidade (ex: P5): ").strip()

        params = {}
        if assunto and assunto.isdigit():
            params['assunto'] = int(assunto)
        if nivel:
            params['nivel'] = nivel
        if periodicidade:
            params['periodicidade'] = periodicidade

        print("\nüîç Buscando agregados...")
        agregados = client.listar_agregados(**params)

        print(f"\n‚úÖ Encontradas {len(agregados)} pesquisa(s)")

        # Mostrar primeiras pesquisas
        for i, pesquisa in enumerate(agregados[:5]):
            print(f"\n{i+1}. üìã {pesquisa['nome']}")
            for j, agregado in enumerate(pesquisa.get('agregados', [])[:3]):
                print(f"   {j+1}. {agregado['id']} - {agregado['nome']}")
            if len(pesquisa.get('agregados', [])) > 3:
                print(f"   ... e mais {len(pesquisa['agregados']) - 3} agregados")

        if len(agregados) > 5:
            print(f"\n... e mais {len(agregados) - 5} pesquisas")

    except Exception as e:
        print(f"‚ùå Erro ao explorar agregados: {e}")

def configuracoes_cache():
    """Gerencia cache e configura√ß√µes"""
    print("\nüíæ CACHE E CONFIGURA√á√ïES")
    print("-" * 40)

    client = IBGEClientCompleto()

    while True:
        info = client.info_cache()
        print(f"\nüìä Status do Cache:")
        print(f"   ‚Ä¢ Habilitado: {'‚úÖ Sim' if info['cache_habilitado'] else '‚ùå N√£o'}")
        print(f"   ‚Ä¢ Total de entradas: {info['total_entradas']}")
        print(f"   ‚Ä¢ Entradas v√°lidas: {info['entradas_validas']}")
        print(f"   ‚Ä¢ Entradas expiradas: {info['entradas_expiradas']}")

        print("\nüîß Op√ß√µes:")
        print("1. üóëÔ∏è Limpar cache")
        print("2. ‚öôÔ∏è Configura√ß√µes do cliente")
        print("0. ‚¨ÖÔ∏è Voltar")

        opcao = input("\nEscolha: ").strip()

        if opcao == '1':
            client.limpar_cache()
            print("‚úÖ Cache limpo!")
        elif opcao == '2':
            print(f"\n‚öôÔ∏è Configura√ß√µes atuais:")
            print(f"   ‚Ä¢ Rate limit: {client.rate_limit}s")
            print(f"   ‚Ä¢ Timeout: {TIMEOUT}")
            print(f"   ‚Ä¢ Max retries: {MAX_RETRIES}")
            print(f"   ‚Ä¢ Max values per request: {MAX_VALUES_PER_REQUEST:,}")
        elif opcao == '0':
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida")

def sobre_cliente():
    """Informa√ß√µes sobre o cliente"""
    print("\nüìã SOBRE O CLIENTE IBGE COMPLETO")
    print("="*50)
    print("üáßüá∑ Cliente Python para API IBGE Dados Agregados v3.0.0")
    print("")
    print("‚ú® FUNCIONALIDADES PREMIUM:")
    print("‚Ä¢ 6 endpoints completos com todos os par√¢metros")
    print("‚Ä¢ Suporte a localidades contextuais")
    print("‚Ä¢ M√∫ltiplos formatos de per√≠odo/classifica√ß√£o")
    print("‚Ä¢ Sistema de cache inteligente")
    print("‚Ä¢ Valida√ß√£o de limite de 100k valores")
    print("‚Ä¢ Parser de s√≠mbolos especiais")
    print("‚Ä¢ An√°lise autom√°tica de dados")
    print("‚Ä¢ Exporta√ß√£o CSV/Excel")
    print("‚Ä¢ Sistema de batch")
    print("‚Ä¢ Rate limiting e retry")
    print("")
    print("üìä ESTAT√çSTICAS:")
    print(f"‚Ä¢ N√≠veis geogr√°ficos: {len(NIVEIS_GEOGRAFICOS)}")
    print(f"‚Ä¢ Periodicidades: {len(PERIODICIDADES)}")
    print(f"‚Ä¢ S√≠mbolos especiais: {len(SIMBOLOS_ESPECIAIS)}")
    print("")
    print("üîó URLS:")
    print("‚Ä¢ API: https://servicodados.ibge.gov.br/api/v3/agregados")
    print("‚Ä¢ SIDRA: https://sidra.ibge.gov.br")
    print("‚Ä¢ Docs: https://servicodados.ibge.gov.br/api/docs/agregados")

def cli_interativo():
    """CLI interativo principal"""
    print("üáßüá∑ CLIENTE IBGE COMPLETO - VERS√ÉO PREMIUM")
    print("Desenvolvido com base na API oficial v3.0.0")

    while True:
        menu_principal()
        opcao = input("\nEscolha uma op√ß√£o: ").strip()

        if opcao == '1':
            suite_testes_completa()
        elif opcao == '2':
            benchmark_performance()
        elif opcao == '3':
            exemplos_avancados()
        elif opcao == '4':
            consulta_personalizada()
        elif opcao == '5':
            explorar_agregados()
        elif opcao == '6':
            configuracoes_cache()
        elif opcao == '7':
            sobre_cliente()
        elif opcao == '0':
            print("\nüëã Obrigado por usar o Cliente IBGE Completo!")
            break
        else:
            print("\n‚ùå Op√ß√£o inv√°lida. Tente novamente.")

        input("\n‚è∏Ô∏è Pressione Enter para continuar...")

# ==========================================
# MAIN - EXECU√á√ÉO PRINCIPAL
# ==========================================

if __name__ == "__main__":
    import sys

    # Verificar argumentos da linha de comando
    if len(sys.argv) > 1:
        if sys.argv[1] == '--test':
            suite_testes_completa()
        elif sys.argv[1] == '--benchmark':
            benchmark_performance()  
        elif sys.argv[1] == '--examples':
            exemplos_avancados()
        elif sys.argv[1] == '--help':
            print("üáßüá∑ CLIENTE IBGE COMPLETO - AJUDA")
            print("="*40)
            print("Uso: python ibge_client_completo.py [op√ß√£o]")
            print("")
            print("Op√ß√µes:")
            print("  --test       Executar suite de testes")
            print("  --benchmark  Executar benchmark")
            print("  --examples   Mostrar exemplos avan√ßados")
            print("  --help       Mostrar esta ajuda")
            print("  (sem op√ß√£o)  Executar CLI interativo")
        else:
            print(f"‚ùå Op√ß√£o desconhecida: {sys.argv[1]}")
            print("Use --help para ver as op√ß√µes dispon√≠veis")
    else:
        # CLI interativo por padr√£o
        cli_interativo()
