"""
Aplica√ß√£o FastAPI principal - Assistente Legislativo
Backend com integra√ß√£o de APIs governamentais
"""

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import uvicorn
import os

# Importar configura√ß√µes e routers
from config import settings
from ibge import router as ibge_router
from datasus import router as datasus_router
from brasil_api import router as brasil_api_router
from legislative import router as legislative_router

# Fun√ß√£o para inicializa√ß√£o da aplica√ß√£o
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    # Startup
    print(f"üöÄ Iniciando {settings.app_name}")
    print(f"üîß Debug mode: {settings.debug}")
    print(f"üåê IBGE API: {settings.ibge_base_url}")
    print(f"üè• DataSUS API: {settings.datasus_base_url}")
    print(f"üáßüá∑ Brasil API: {settings.brasil_api_base_url}")
    
    yield
    
    # Shutdown
    print("üõë Encerrando aplica√ß√£o")

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="Assistente Legislativo API",
    description="""
    Backend para assistente legislativo com integra√ß√£o de APIs governamentais.
    
    ## Funcionalidades
    
    * **IBGE**: Dados demogr√°ficos, estat√≠sticos e geogr√°ficos
    * **DataSUS**: Informa√ß√µes sobre estabelecimentos de sa√∫de
    * **Brasil API**: CEP, CNPJ, feriados, bancos
    * **An√°lise Legislativa**: Gera√ß√£o de justificativas e simula√ß√£o de tramita√ß√£o
    * **Agrega√ß√£o de Dados**: Busca inteligente por √°rea tem√°tica
    """,
    version="1.0.0",
    lifespan=lifespan
)

# Configurar middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(GZipMiddleware, minimum_size=1000)

# Manipulador global de erros
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "message": exc.detail,
            "error_code": exc.status_code
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "message": "Erro interno do servidor",
            "error_code": 500
        }
    )

# Registrar routers
app.include_router(
    ibge_router,
    prefix="/api/v1/ibge",
    tags=["IBGE"]
)

app.include_router(
    datasus_router,
    prefix="/api/v1/datasus",
    tags=["DataSUS"]
)

app.include_router(
    brasil_api_router,
    prefix="/api/v1/brasil-api",
    tags=["Brasil API"]
)

app.include_router(
    legislative_router,
    prefix="/api/v1/legislative",
    tags=["An√°lise Legislativa"]
)

# Endpoints raiz
@app.get("/")
async def root():
    """Endpoint raiz da API"""
    return {
        "message": f"Bem-vindo ao {settings.app_name}",
        "version": "1.0.0",
        "status": "online",
        "endpoints": {
            "docs": "/docs",
            "redoc": "/redoc",
            "health": "/health",
            "apis": {
                "ibge": "/api/v1/ibge",
                "datasus": "/api/v1/datasus", 
                "brasil_api": "/api/v1/brasil-api",
                "legislative": "/api/v1/legislative"
            }
        }
    }

@app.get("/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de da API"""
    return {
        "status": "healthy",
        "message": f"{settings.app_name} est√° funcionando normalmente",
        "version": "1.0.0",
        "environment": "development" if settings.debug else "production"
    }

@app.get("/api/v1/status")
async def api_status():
    """Status detalhado de todas as APIs integradas"""
    
    # Verificar status das APIs externas (simulado)
    status = {
        "timestamp": "2025-09-06T21:30:00Z",
        "apis": {
            "ibge": {
                "status": "online",
                "base_url": settings.ibge_base_url,
                "endpoints_disponiveis": ["localidades", "agregados", "nomes", "noticias"]
            },
            "datasus": {
                "status": "simulated",
                "base_url": settings.datasus_base_url,
                "endpoints_disponiveis": ["cnes", "cns", "indicadores", "vacinacao"],
                "observacao": "APIs simuladas (reais requerem autentica√ß√£o espec√≠fica)"
            },
            "brasil_api": {
                "status": "online",
                "base_url": settings.brasil_api_base_url,
                "endpoints_disponiveis": ["cep", "cnpj", "bancos", "feriados", "ddd", "taxas"]
            },
            "legislative_analyzer": {
                "status": "online",
                "funcionalidades": ["analise", "simulacao", "relatorios", "templates"]
            }
        },
        "cache": {
            "status": "disabled",
            "redis_url": settings.redis_url or "not_configured"
        }
    }
    
    return {
        "success": True,
        "message": "Status das APIs recuperado com sucesso",
        "data": status
    }

# Executar aplica√ß√£o
if __name__ == "__main__":
    uvicorn.run(
        "main_fastapi:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug,
        log_level="info" if not settings.debug else "debug"
    )
